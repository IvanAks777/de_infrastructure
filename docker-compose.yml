x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  env_file:
    - .env
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/dbt_click:/opt/dbt_click
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - de_infrastructure

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["postgres", "-c", "wal_level=logical"]
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - ./postgres/pg_airflow:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - de_infrastructure

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - de_infrastructure

  postgres-app:
    image: postgres:14
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
      POSTGRES_DB: appdb
    ports:
      - "5434:5432"
    volumes:
      - postgres_app_data:/var/lib/postgresql/data
    networks:
      - de_infrastructure

  postgres-superset:
    image: postgres:14
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset_password
      POSTGRES_DB: superset_db
    volumes:
      - postgres_superset_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - de_infrastructure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    container_name: af-worker
    command: celery worker
    ports:
      - "4041:4041"
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command:
      - bash
      - -c
      - |
          echo "Airflow version"
          airflow version
          airflow connections add 'spark_default' \
            --conn-type 'spark' \
            --conn-host 'local' \
            --conn-extra '{"spark-binary": "spark-submit", "deploy-mode": "client"}'

          airflow connections add 'backend_db' \
            --conn-type 'postgres' \
            --conn-host 'postgres' \
            --conn-login "${POSTGRES_USER}" \
            --conn-password "${POSTGRES_PASSWORD}" \
            --conn-schema 'backend' \
            --conn-port 5432

          airflow connections add 'metadata_db' \
            --conn-type 'postgres' \
            --conn-host 'postgres' \
            --conn-login "${POSTGRES_USER}" \
            --conn-password "${POSTGRES_PASSWORD}" \
            --conn-schema 'metadata' \
            --conn-port 5432

          airflow connections add 'minios3_conn' \
            --conn-type 'aws' \
            --conn-login "${MINIO_ROOT_USER}" \
            --conn-password "${MINIO_ROOT_PASSWORD}" \
            --conn-extra '{"endpoint_url": "http://minio:9000"}'

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio
      MINIO_ADDRESS: ':9000'
      MINIO_CONSOLE_ADDRESS: ':9001'
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio:/data
    networks:
      - de_infrastructure

  # Сервис ClickHouse для аналитики и хранения данных
  clickhouse:
    image: yandex/clickhouse-server:latest
    hostname: clickhouse
    container_name: ch
    # HTTP интерфейс (8123) и Native протокол (9000)
    ports:
      - "8123:8123"  # HTTP интерфейс для запросов
      - "9010:9000"  # Native протокол для клиентов (используется Spark)
    # Постоянное хранение данных
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/clickhouse_init.sql:/docker-entrypoint-initdb.d/init.sql
    # Настройки аутентификации и доступа
    environment:
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"  # Включить управление доступом
      # Настройки для доступа из Spark
      CLICKHOUSE_ALLOW_SPARK: "1"
      CLICKHOUSE_NETWORK_COMPRESSION: "1"  # Сжатие данных для Spark
    networks:
      de_infrastructure:  # Общая сеть с Kafka/Zookeeper/Spark
        ipv4_address: 11.11.11.23

  superset:
    image: apache/superset:latest
    ports:
      - "8088:8088"
    environment:
      SUPERSET_ENV: production
      SUPERSET_DATABASE_URI: postgresql+psycopg2://superset:superset_password@postgres-superset:5432/superset_db
    volumes:
      - ./config/superset_config.py:/app/pythonpath/superset_config.py
      - superset_home:/app/superset_home
    networks:
      - de_infrastructure

  superset-init:
    image: apache/superset:latest
    container_name: superset-init
    depends_on:
      - superset
    environment:
      SUPERSET_ENV: production
      SUPERSET_DATABASE_URI: postgresql+psycopg2://superset:superset_password@postgres-superset:5432/superset_db
    volumes:
      - ./config/superset_config.py:/app/pythonpath/superset_config.py
    command: >
      sh -c "flask db upgrade &&
             flask fab create-admin
               --username admin
               --password admin
               --firstname Admin
               --lastname User
               --email admin@example.com"
    networks:
      - de_infrastructure

  jupyter:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark
    image: airflow-jupyter
    ports:
      - "8889:8888"
    volumes:
       - ./config/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py
       - ./notebooks:/home/jovyan/notebooks
       - .spark/jars:/home/jovyan/jars
    environment:
      GRANT_SUDO: yes
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    user: root
    networks:
      - de_infrastructure

  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark
    image: airflow-spark
    ports:
      - "4040:4040"
      - "8890:8888"
    volumes:
      - .spark/jars:/home/jovyan/jars
      - ./scripts:/home/jovyan/scripts
    networks:
      - de_infrastructure

  # Сервис Zookeeper (требуется для работы Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - de_infrastructure

  # Сервис Kafka для обработки потоковых данных
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    environment:
      # Настройки для работы Kafka
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Подключение к Zookeeper
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092  # Доступ внутри и снаружи сети
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT  # Протоколы безопасности
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT  # Внутренний listener
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Фактор репликации
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Автосоздание топиков
      KAFKA_DELETE_TOPIC_ENABLE: "true"  # Разрешение удаления топиков
    ports:
      - "9092:9092"  # Порт для внутреннего доступа
      - "29092:29092"  # Порт для внешнего доступа
    networks:
      - de_infrastructure

  # Веб-интерфейс для управления Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - de_infrastructure

networks:
  de_infrastructure:
    driver: bridge
    ipam:
      config:
        - subnet: 11.11.11.0/24

volumes:
  postgres_app_data:
  postgres_superset_data:
  clickhouse_data:
  superset_home:
  notebooks:
